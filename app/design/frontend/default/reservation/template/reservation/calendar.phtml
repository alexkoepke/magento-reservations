<script type="text/javascript">

    var dateFormat = function () {
        var    token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
            timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
            timezoneClip = /[^-+\dA-Z]/g,
            pad = function (val, len) {
                val = String(val);
                len = len || 2;
                while (val.length < len) val = "0" + val;
                return val;
            };

        // Regexes and supporting functions are cached through closure
        return function (date, mask, utc) {
            var dF = dateFormat;

            // You can't provide utc if you skip other args (use the "UTC:" mask prefix)
            if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
                mask = date;
                date = undefined;
            }

            // Passing date through Date applies Date.parse, if necessary
            date = date ? new Date(date) : new Date;
            if (isNaN(date)) throw SyntaxError("invalid date");

            mask = String(dF.masks[mask] || mask || dF.masks["default"]);

            // Allow setting the utc argument via the mask
            if (mask.slice(0, 4) == "UTC:") {
                mask = mask.slice(4);
                utc = true;
            }

            var    _ = utc ? "getUTC" : "get",
                d = date[_ + "Date"](),
                D = date[_ + "Day"](),
                m = date[_ + "Month"](),
                y = date[_ + "FullYear"](),
                H = date[_ + "Hours"](),
                M = date[_ + "Minutes"](),
                s = date[_ + "Seconds"](),
                L = date[_ + "Milliseconds"](),
                o = utc ? 0 : date.getTimezoneOffset(),
                flags = {
                    d:    d,
                    dd:   pad(d),
                    ddd:  dF.i18n.dayNames[D],
                    dddd: dF.i18n.dayNames[D + 7],
                    m:    m + 1,
                    mm:   pad(m + 1),
                    mmm:  dF.i18n.monthNames[m],
                    mmmm: dF.i18n.monthNames[m + 12],
                    yy:   String(y).slice(2),
                    yyyy: y,
                    h:    H % 12 || 12,
                    hh:   pad(H % 12 || 12),
                    H:    H,
                    HH:   pad(H),
                    M:    M,
                    MM:   pad(M),
                    s:    s,
                    ss:   pad(s),
                    l:    pad(L, 3),
                    L:    pad(L > 99 ? Math.round(L / 10) : L),
                    t:    H < 12 ? "a"  : "p",
                    tt:   H < 12 ? "am" : "pm",
                    T:    H < 12 ? "A"  : "P",
                    TT:   H < 12 ? "AM" : "PM",
                    Z:    utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
                    o:    (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
                    S:    ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
                };

            return mask.replace(token, function ($0) {
                return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
            });
        };
    }();

    // Some common format strings
    dateFormat.masks = {
        "default":      "ddd mmm dd yyyy HH:MM:ss",
        shortDate:      "m/d/yy",
        mediumDate:     "mmm d, yyyy",
        longDate:       "mmmm d, yyyy",
        fullDate:       "dddd, mmmm d, yyyy",
        shortTime:      "h:MM TT",
        mediumTime:     "h:MM:ss TT",
        longTime:       "h:MM:ss TT Z",
        isoDate:        "yyyy-mm-dd",
        isoTime:        "HH:MM:ss",
        isoDateTime:    "yyyy-mm-dd'T'HH:MM:ss",
        isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
    };

    // Internationalization strings
    dateFormat.i18n = {
        dayNames: [
            "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat",
            "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
        ],
        monthNames: [
            "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
            "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
        ]
    };

    // For convenience...
    Date.prototype.format = function (mask, utc) {
        return dateFormat(this, mask, utc);
    };

</script>
<?php $storetype = Mage::getStoreConfig('reservation/schedules/storetype', Mage::app()->getStore()); ?>
<?php if($storetype == 'express'): ?>
    <?php $exclude_dates = Mage::helper('reservation')->getExcludeDates(); ?>
    <?php $include_dates = Mage::helper('reservation')->getMasterDates(); ?>
    <?php $schedules = Mage::helper('reservation')->getScheduleDates(); ?>
    <div id="datepicker"></div>
    <input type="hidden" name="reserve_date" id="reserve_date" />
    <script type="text/javascript" >
        var noHolidays = [<?php echo '"'.implode('","', $exclude_dates).'"' ?>];
        var masterDates = [<?php echo '"'.implode('","', $include_dates).'"' ?>];
        var range = [<?php echo '"'.implode('","', $schedules).'"' ?>];
        var begin;
        var end;
        var dates_allowed = [];
        for(var i=0;i<range.length;i=i+2)
        {

            if(new Date(range[i+1]) > new Date(range[i]))
            {
                //begin = Date.parseExact(range[i], 'yyyy-mm-dd');
                begin = new Date(range[i]);
                //end   = Date.parseExact(range[i+1], 'yyyy-mm-dd');
                end   = new Date(range[i+1]);

                while(begin <= end) {
                    dates_allowed.push(begin.format("yyyy-mm-dd"))
                    begin.addDays(1)
                }

            }
        }
        //alert(dates_allowed);
        //var dates_allowed = ['2014-11-01','2014-11-02','2014-11-03','2014-11-04' ];
        var currentDate = 1;
        jQuery(document).ready(function($) {
            $("#datepicker").datepicker({
                dateFormat: "yy-mm-dd",
                minDate: +1,
                defaultDate: '+'+currentDate,
                beforeShowDay: function(date){
                    var string = $.datepicker.formatDate('yy-mm-dd', date);
                    if(masterDates.indexOf(string) != -1){
                        return [!(masterDates.indexOf(string) == -1)];
                    } else {
                        return [!noSunday(date) && (noHolidays.indexOf(string) == -1 ) && !(dates_allowed.indexOf(string) == -1 )]
                    }
                },
                onSelect: function(dateText, inst){
                    $('#reserve_date').val(dateText);
                }
            });
            function noSunday(date){
                var day = date.getDay();
                return (day === 0);
            };

            for (var i=0; i<noHolidays.length; i++) {
                var date = $('#datepicker').val();
                if ($.inArray(date, noHolidays) != -1) {
                    currentDate += 1;
                    var setDate =  '+' + currentDate;
                    $("#datepicker").datepicker("setDate", setDate);
                }
            }

            $('#reserve_date').val($('#datepicker').val());
        });



    </script>
<?php else: ?>
    <?php $exclude_dates = Mage::helper('reservation')->getExcludeDates(); ?>
    <?php $include_dates = Mage::helper('reservation')->getMasterDates(); ?>
    <div id="datepicker"></div>
    <input type="hidden" name="reserve_date" id="reserve_date" />
    <script type="text/javascript" >
        var noHolidays = [<?php echo '"'.implode('","', $exclude_dates).'"' ?>];
        var masterDates = [<?php echo '"'.implode('","', $include_dates).'"' ?>];
        var currentDate = 1;
        jQuery(document).ready(function($) {
            $("#datepicker").datepicker({
                dateFormat: "yy-mm-dd",
                minDate: +1,
                defaultDate: '+'+currentDate,
                beforeShowDay: function(date){
                    var string = $.datepicker.formatDate('yy-mm-dd', date);
                    if(masterDates.indexOf(string) != -1){
                        return [!(masterDates.indexOf(string) == -1)];
                    } else {
                        return [!noSunday(date) && (noHolidays.indexOf(string) == -1 )]
                    }
                },
                onSelect: function(dateText, inst){
                    $('#reserve_date').val(dateText);
                }
            });
            function noSunday(date){
                var day = date.getDay();
                return (day === 0);
            };
            for (var i=0; i<noHolidays.length; i++) {
                var date = $('#datepicker').val();
                if ($.inArray(date, noHolidays) != -1) {
                    currentDate += 1;
                    var setDate =  '+' + currentDate;
                    $("#datepicker").datepicker("setDate", setDate);
                }
            }

            $('#reserve_date').val($('#datepicker').val());
        });

    </script>
<?php endif; ?>